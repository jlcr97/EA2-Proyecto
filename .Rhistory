lines(xfit, yfit, col="blue", lwd=2)
setwd("C:/Users/Tonantzin Real/Desktop/Supervivencia proyecto")
yfit
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
plot(lines(xfit, yfit, col="blue", lwd=2))
############# Paquetes que se necesitan instalar y luego cargar #############
rm(list = ls())
library(ggplot2)
library(survival)
library(survminer)
library(foreach)
install.packages("survminer")
install.packages("foreach")
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
x <- sin_ati$residuals
?lines
rm(list = ls())
library(ggplot2)
library(survival)
library(survminer)
library(foreach)
datos <- read.csv('datos19abr.csv',stringsAsFactors = FALSE)
indef <- "9999-99-99"
#Para reemplazar a esta matriz con las observaciones positivas COVID19:
datos<- datos[datos$RESULTADO ==1,]
fechaActualizacion <- datos$FECHA_ACTUALIZACION[1]
muerto <- datos$FECHA_DEF != indef
defunciones <- datos$FECHA_DEF[muerto]
defunciones <- as.Date(defunciones)
#Ahora cambiamos a formato fecha las columnas de actualizacion, ingreso y sintomas. Con la de defuncion lideare mas adelante.
datos$FECHA_ACTUALIZACION <- as.Date(datos$FECHA_ACTUALIZACION)
datos$FECHA_INGRESO <- as.Date(datos$FECHA_INGRESO)
datos$FECHA_SINTOMAS <- as.Date(datos$FECHA_SINTOMAS)
dias_Sintomas <- vector()
dias_Internado <- vector()
#Si el dia de actualizacion coincide con el dia de sintomas u hospitalizacion entonces tendria dia "0", pero me interesa contar a partir del dia 1. De esta forma estoy hablando de numeros cardinales: el 1er dia corresponde al dia 1, no al dia 0
dias_Sintomas[!muerto] <- datos$FECHA_ACTUALIZACION[!muerto] - datos$FECHA_SINTOMAS[!muerto]+1
dias_Sintomas[muerto] <- defunciones - datos$FECHA_SINTOMAS[muerto]+1
dias_Internado[!muerto] <- datos$FECHA_ACTUALIZACION[!muerto] - datos$FECHA_INGRESO[!muerto]+1
dias_Internado[muerto] <- defunciones - datos$FECHA_INGRESO[muerto]+1
datos <-cbind(datos,dias_Sintomas,dias_Internado,muerto)
#Limpiare el workspace de los vectores que concatene
rm(muerto,dias_Sintomas,dias_Internado,defunciones)
#Hay ciertos casos en que por errores de la base de datos tiene errores que resultan en que los dias de sitnomas o internados sean menores a cero. Eliminaremos estos:
datos <- datos[datos$dias_Internado > 0,]
datos <- datos[datos$dias_Sintomas > 0, ]
#Queremos anadir una columna indicadora sobre si hay censura. Si el paciente sigue vivo as of la fecha de actualizacion, la muestra esta censurada por la derecha y asi tendra un valor de 0. Caso contrario, delta es 1. Aprovechare la columna logica "muerto"
delta <- as.integer(datos$muerto)
datos <- cbind(datos,delta)
muertos <- datos[datos$delta == 1,]
muertos <- muertos[complete.cases(muertos),]
setwd("C:/Users/Tonantzin Real/Desktop/Supervivencia proyecto/MostRecent")
datos <- read.csv('datos19abr.csv',stringsAsFactors = FALSE)
indef <- "9999-99-99"
#Para reemplazar a esta matriz con las observaciones positivas COVID19:
datos<- datos[datos$RESULTADO ==1,]
fechaActualizacion <- datos$FECHA_ACTUALIZACION[1]
muerto <- datos$FECHA_DEF != indef
defunciones <- datos$FECHA_DEF[muerto]
defunciones <- as.Date(defunciones)
#Ahora cambiamos a formato fecha las columnas de actualizacion, ingreso y sintomas. Con la de defuncion lideare mas adelante.
datos$FECHA_ACTUALIZACION <- as.Date(datos$FECHA_ACTUALIZACION)
datos$FECHA_INGRESO <- as.Date(datos$FECHA_INGRESO)
datos$FECHA_SINTOMAS <- as.Date(datos$FECHA_SINTOMAS)
dias_Sintomas <- vector()
dias_Internado <- vector()
#Si el dia de actualizacion coincide con el dia de sintomas u hospitalizacion entonces tendria dia "0", pero me interesa contar a partir del dia 1. De esta forma estoy hablando de numeros cardinales: el 1er dia corresponde al dia 1, no al dia 0
dias_Sintomas[!muerto] <- datos$FECHA_ACTUALIZACION[!muerto] - datos$FECHA_SINTOMAS[!muerto]+1
dias_Sintomas[muerto] <- defunciones - datos$FECHA_SINTOMAS[muerto]+1
dias_Internado[!muerto] <- datos$FECHA_ACTUALIZACION[!muerto] - datos$FECHA_INGRESO[!muerto]+1
dias_Internado[muerto] <- defunciones - datos$FECHA_INGRESO[muerto]+1
datos <-cbind(datos,dias_Sintomas,dias_Internado,muerto)
#Limpiare el workspace de los vectores que concatene
rm(muerto,dias_Sintomas,dias_Internado,defunciones)
#Hay ciertos casos en que por errores de la base de datos tiene errores que resultan en que los dias de sitnomas o internados sean menores a cero. Eliminaremos estos:
datos <- datos[datos$dias_Internado > 0,]
datos <- datos[datos$dias_Sintomas > 0, ]
#Queremos anadir una columna indicadora sobre si hay censura. Si el paciente sigue vivo as of la fecha de actualizacion, la muestra esta censurada por la derecha y asi tendra un valor de 0. Caso contrario, delta es 1. Aprovechare la columna logica "muerto"
delta <- as.integer(datos$muerto)
datos <- cbind(datos,delta)
muertos <- datos[datos$delta == 1,]
muertos <- muertos[complete.cases(muertos),]
datos <- read.csv('datos19abr.csv',stringsAsFactors = FALSE)
indef <- "9999-99-99"
#Para reemplazar a esta matriz con las observaciones positivas COVID19:
datos<- datos[datos$RESULTADO ==1,]
fechaActualizacion <- datos$FECHA_ACTUALIZACION[1]
muerto <- datos$FECHA_DEF != indef
defunciones <- datos$FECHA_DEF[muerto]
defunciones <- as.Date(defunciones)
#Ahora cambiamos a formato fecha las columnas de actualizacion, ingreso y sintomas. Con la de defuncion lideare mas adelante.
datos$FECHA_ACTUALIZACION <- as.Date(datos$FECHA_ACTUALIZACION)
datos$FECHA_INGRESO <- as.Date(datos$FECHA_INGRESO)
datos$FECHA_SINTOMAS <- as.Date(datos$FECHA_SINTOMAS)
dias_Sintomas <- vector()
dias_Internado <- vector()
#Si el dia de actualizacion coincide con el dia de sintomas u hospitalizacion entonces tendria dia "0", pero me interesa contar a partir del dia 1. De esta forma estoy hablando de numeros cardinales: el 1er dia corresponde al dia 1, no al dia 0
dias_Sintomas[!muerto] <- datos$FECHA_ACTUALIZACION[!muerto] - datos$FECHA_SINTOMAS[!muerto]+1
dias_Sintomas[muerto] <- defunciones - datos$FECHA_SINTOMAS[muerto]+1
dias_Internado[!muerto] <- datos$FECHA_ACTUALIZACION[!muerto] - datos$FECHA_INGRESO[!muerto]+1
dias_Internado[muerto] <- defunciones - datos$FECHA_INGRESO[muerto]+1
datos <-cbind(datos,dias_Sintomas,dias_Internado,muerto)
#Limpiare el workspace de los vectores que concatene
rm(muerto,dias_Sintomas,dias_Internado,defunciones)
#Hay ciertos casos en que por errores de la base de datos tiene errores que resultan en que los dias de sitnomas o internados sean menores a cero. Eliminaremos estos:
datos <- datos[datos$dias_Internado > 0,]
datos <- datos[datos$dias_Sintomas > 0, ]
#Queremos anadir una columna indicadora sobre si hay censura. Si el paciente sigue vivo as of la fecha de actualizacion, la muestra esta censurada por la derecha y asi tendra un valor de 0. Caso contrario, delta es 1. Aprovechare la columna logica "muerto"
delta <- as.integer(datos$muerto)
datos <- cbind(datos,delta)
muertos <- datos[datos$delta == 1,]
muertos <- muertos[complete.cases(muertos),]
#Muchas de las variables que nos importan son categoricas (si = 1, no = 2) pero hay informacion que falta que la base de datos representa con 98 o 99. No estoy familiarizado en exceso con dplyr o PANDAS asi que implementare un loop que reemplace valores que no sean 1 o 2 por NA para poder quitar estos casos con complete.cases:
k = length(datos$NEUMONIA)
logico = !logical(length = k)
#Solo por conveniencia voy a poner cada variable asociada a su numero de columna para que se entienda que estoy tomando y que no. Van a ser varias lineas: Importante: (s) denota una variable categorica de si o no.
# 1: FECHA_ACTUALIZACION  2: ID_REGISTRO          3: ORIGEN               4: SECTOR
# 5: ENTIDAD_UM           6: SEXO                 7: ENTIDAD_NAC          8: ENTIDAD_RES
# 9: MUNICIPIO_RES       10: TIPO_PACIENTE       11: FECHA_INGRESO       12: FECHA_SINTOMAS
#13: FECHA_DEF           14: INTUBADO (s)        15: NEUMONIA (s)        16: EDAD
#17: NACIONALIDAD        18: EMBARAZO            19: LENGUA_INDIG (s)    20: DIABETES (s)
#21: EPOC (s)            22: ASMA (s)            23: INMUSUPR (s)        24: HIPERTENSION (s)
#25: OTRA_COM (s)        26: CARDIOVASCULAR (s)  27: OBESIDAD (s)        28: RENAL_CRONICA (s)
#29: TABAQUISMO (s)      30: OTRO_CASO           31: RESULTADO           32: MIGRANTE
#33: PAIS_NACIONALIDAD   34: PAIS_ORIGEN         35: UCI                 36: dias_Sintomas
#37: dias_Internado      38: muerto (s)          39: delta
#IMPORTANTE: Primero elegimos las variables categoricas de (si/no) que queremos incluir en el modelo. Si metemos una variable que no es (si/no) a este vecotr de columnas, el loop no jala.
columnas <- c(14,15,20,21,22,23,24,26,27,28,29)
aux <- datos[,columnas]
for (i in 1:k){
for (j in 1:length(columnas))
{
if (!(aux[i,j] == 2 || aux[i,j] == 1))
{
aux[i,j] = NA
}
}
}
#Una vez filtrada la informacion a los casos comletos de las variables indicadoras, ahora si  incluimos las variables que queremos en el data frame final (el orden importa):
columnas <- c(6,37,16,columnas,39)
tablaFinal <- datos[complete.cases(aux),columnas]
rm(columnas,i,j,k,logico,aux)
rm(delta,fechaActualizacion,indef)
rm(datos,muertos)
view(cancer)
View(cancer)
tiempo <- cancer$time
delta <- cancer$status
modelo <- Surv(tiempo, delta)
modelo
km <- survfit(modelo ~ 1)
km
plot(km)
plot(km,conf.int = FALSE)
ggsurvplot(fit=km,data=cancer)
summary(km)
ggsurvplot(fit=km,data=cancer,censor=FALSE)
ggsurvplot(Surv(tiempo,delta) ~ 1, data=cancer, censor=FALSE)
ggsurvplot(survfit(Surv(tiempo,delta) ~ 1), data=cancer, censor=FALSE)
ggsurvplot(survfit(Surv(time,status) ~ 1), data=cancer, censor=FALSE)
ggsurvplot(survfit(Surv(time,status) ~ sex), data=cancer, censor=FALSE)
ggsurvplot(survfit(Surv(tiempo,delta) ~ sex), data=cancer, censor=FALSE)
ggsurvplot(survfit(Surv(tiempo,delta)) ~ sex, data=cancer, censor=FALSE)
ggsurvplot(survfit(Surv(tiempo,delta)~sex,data=cancer))
ggsurvplot(survfit(Surv(tiempo,delta)~ph.ecog,data=cancer))
ggsurvplot(survfit(Surv(tiempo,delta)~ph.ecog,data=cancer),censor=FALSE)
ggsurvplot(survfit(Surv(tiempo,delta)~ph.ecog,data=cancer),censor=FALSE,conf.int = TRUE)
ggsurvplot(survfit(Surv(tiempo,delta)~ph.ecog,data=cancer),censor=FALSE,ggtheme = theme())
rm(delta,modelo,tiempo,km)
covariates <- c("SEXO","INTUBADO", "NEUMONIA", "DIABETES", "EPOC", "ASMA", "INMUSUPR","HIPERTENSION","CARDIOVASCULAR","OBESIDAD","RENAL_CRONICA","TABAQUISMO")
formulas <- list()
foreach (i = 1:length(covariates)) %do% {
formulas[[i]] <- as.formula(paste0("Surv(dias_Internado, delta) ~ ", covariates[i]))
}
fits <- surv_fit(formulas, data = tablaFinal)
#Aqui arriba utilice la funcion surv_fit, que es una extension en survminer de la funcion surfvit de survival. La unica diferencia que hace es que me deja meter como imput una lista de objetos Surv para que me regrese una lista de objetos survfit y asi poder usar la funcion ggsurplot_list para hacer varias graficas con una sola ejecucion. Un milagro la verdad.
#Las siguientes dos listas tienen que ser del mismo length que 'covariates'.
legendTitles <- list("","","","","","","","","","","","")
legendLabels <- list(c("Mujer","Hombre"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"),c("Positivo","Negativo"))
titulos <- list("Sexo","Intubado", "Neumonia", "Diabetes", "EPOC", "Asma", "Inmunusupresion","Hipertension","Condicion Cardiovascular","Obesidad","Condicion Renal Cronica","Tabaquismo")
plots <- ggsurvplot_list(fit = fits, data = tablaFinal, censor = FALSE, conf.int = TRUE, title = titulos, legend.title = legendTitles, legend.labs = legendLabels, ylab = "Supervivencia", ylim = c(0.3,1), size = 0.5, ggtheme = theme(plot.title = element_text(hjust = 0.45)))
#En esta parte generaremos y guardaremos los plots. SOLO SE CORRE UNA VEZ y se necesita saber a priori cuantas graficas tenemos para saber en cuantos plots los vamos a dividir. Se van a guardar directamente al workspace.
graficas1 <- arrange_ggsurvplots(plots[1:4],print = FALSE, ncol = 2, nrow = 2)
graficas2 <- arrange_ggsurvplots(plots[5:8],print = FALSE, ncol = 2, nrow = 2)
graficas3 <- arrange_ggsurvplots(plots[9:10],print = FALSE, ncol = 2, nrow = 2)
ggsave("graficas1.png", graficas1, device = "png", width = 6.67, height = 6.67, units = "in", dpi = "retina")
ggsave("graficas2.png", graficas2, device = "png", width = 6.67, height = 6.67, units = "in", dpi = "retina")
ggsave("graficas3.png", graficas3, device = "png", width = 6.67, height = 6.67, units = "in", dpi = "retina")
#En esta parte generaremos y guardaremos los plots. SOLO SE CORRE UNA VEZ y se necesita saber a priori cuantas graficas tenemos para saber en cuantos plots los vamos a dividir. Se van a guardar directamente al workspace.
graficas1 <- arrange_ggsurvplots(plots[1:4],print = FALSE, ncol = 2, nrow = 2)
graficas2 <- arrange_ggsurvplots(plots[5:8],print = FALSE, ncol = 2, nrow = 2)
graficas3 <- arrange_ggsurvplots(plots[9:12],print = FALSE, ncol = 2, nrow = 2)
ggsave("graficas1.png", graficas1, device = "png", width = 6.67, height = 6.67, units = "in", dpi = "retina")
ggsave("graficas2.png", graficas2, device = "png", width = 6.67, height = 6.67, units = "in", dpi = "retina")
ggsave("graficas3.png", graficas3, device = "png", width = 6.67, height = 6.67, units = "in", dpi = "retina")
#Para ver Cox univariado con un covariate cualitativo (categorico):
regresionCox <- coxph(Surv(dias_Internado,delta)~NEUMONIA, data = tablaFinal)
regresionCox
summary(regresionCox)
regresionCox
regresionCox <- coxph(Surv(dias_Internado,delta)~NEUMONIA, data = tablaFinal)
regresionCox <- coxph(Surv(dias_Internado,delta)~NEUMONIA+EPOC, data = tablaFinal)
regresionCox
regresionCox <- coxph(Surv(dias_Internado,delta)~factor(NEUMONIA+EPOC), data = tablaFinal)
regresionCox <- coxph(Surv(dias_Internado,delta)~factor(NEUMONIA)+factor(EPOC), data = tablaFinal)
regresionCox
covariates <- c("SEXO","INTUBADO", "NEUMONIA", "DIABETES", "EPOC", "ASMA", "INMUSUPR","HIPERTENSION","CARDIOVASCULAR","OBESIDAD","RENAL_CRONICA","TABAQUISMO")
formulasUnivariadas <- sapply(covariates,
function(x) as.formula(paste('Surv(dias_Internado,delta)~',x)))
modelosUnivariados <- lapply(formulasUnivariadas, function(x){coxph(x, data = tablaFinal)})
# Extraer datos:
resultadosUnivariados <- lapply(modelosUnivariados,
function(x){
x <- summary(x)
pValue<-signif(x$wald["pvalue"], digits=4)
waldTest<-signif(x$wald["test"], digits=4)
beta<-signif(x$coef[1], digits=4);#coeficient beta
hazRate <-signif(x$coef[2], digits=4);#exp(beta)
hazRateInferior <- signif(x$conf.int[,"lower .95"], 4)
hazRatSuperior <- signif(x$conf.int[,"upper .95"],4)
hazRate <- paste0(hazRate, " (",
hazRateInferior, "-", hazRatSuperior, ")")
res<-c(beta, hazRate, waldTest, pValue)
names(res)<-c("beta", "HR (IC 95% para HR )", "waldTest",
"pValue")
return(res)
#return(exp(cbind(coef(x),confint(x))))
})
res <- t(as.data.frame(resultadosUnivariados, check.names = FALSE))
as.data.frame(res)
1-qchisq(0.54,1)
setwd("C:/Users/Tonantzin Real/Desktop/EA2-Proyecto")
library(tidyverse)
library(dplyr)
library(tidyr)
library(matlib)
library(ggplot2)
#install.packages("olsrr"), es para las regresiones
library(olsrr)
#install.packates("GGally"), extensión de ggplot
#install.packages("GGally")
library(GGally)
library(MASS)
library(lmtest)
library(orcutt)
library(HoRM)
library(car)
library(nlme)
#datos <- read.csv("BaseDatosEA2.csv")
#Cambiamos la base porque nos marcaba error en la linea 43, esta base ya esta limpia, solo estan los datos de Alvaro Obregon y las variables que
#pensamos utilizar en el modelo
datos <- read.csv("BaseDatos2.csv")
nrow(datos)
names(datos)
#datos <- datos %>%  #CAUSA ERROR
#select(sexo_jefe,edad_jefe,educa_jefe,tot_integ,perc_ocupa, ubica_geo, est_socio, ing_cor,gasto_mon,otros_gas,ahorro,deposito,retiro_inv,pago_tarje, tabaco, erogac_tot,
#deudas, vestido, transporte) %>%
#filter(ubica_geo > 9009, ubica_geo < 9011) ##Alvaro Obregon es el 9010
#Otras erogaciones: suma de depositos, pago de deudas, tarjetas de crédito, préstamos a otros
#nrow(datos)
#head(datos)
#Creamos una nueva columna para la edad al cuadrado
#datos = mutate(datos, edad_2=datos$edad_jefe^2)
#  head(datos)
```
summary(mejoraCDMX)
library(tidyverse)
library(dplyr)
library(tidyr)
library(matlib)
library(ggplot2)
#install.packages("olsrr"), es para las regresiones
library(olsrr)
#install.packates("GGally"), extensión de ggplot
#install.packages("GGally")
library(GGally)
library(MASS)
library(lmtest)
library(orcutt)
library(HoRM)
library(car)
library(nlme)
#datos <- read.csv("BaseDatosEA2.csv")
#Cambiamos la base porque nos marcaba error en la linea 43, esta base ya esta limpia, solo estan los datos de Alvaro Obregon y las variables que
#pensamos utilizar en el modelo
datos <- read.csv("BaseDatos2.csv")
nrow(datos)
names(datos)
#datos <- datos %>%  #CAUSA ERROR
#select(sexo_jefe,edad_jefe,educa_jefe,tot_integ,perc_ocupa, ubica_geo, est_socio, ing_cor,gasto_mon,otros_gas,ahorro,deposito,retiro_inv,pago_tarje, tabaco, erogac_tot,
#deudas, vestido, transporte) %>%
#filter(ubica_geo > 9009, ubica_geo < 9011) ##Alvaro Obregon es el 9010
#Otras erogaciones: suma de depositos, pago de deudas, tarjetas de crédito, préstamos a otros
#nrow(datos)
#head(datos)
#Creamos una nueva columna para la edad al cuadrado
#datos = mutate(datos, edad_2=datos$edad_jefe^2)
#  head(datos)
```
modeloCDMX <- lm(datos$ing_cor ~ edad_jefe + erogac_tot + gasto_mon + sexo_jefe + educa_jefe + est_socio, datos)
summary(modeloCDMX)
datos$sexo_jefe <- factor(datos$sexo_jefe)
levels(datos$sexo_jefe) <- c("Hombre","Mujer")
datos$est_socio<- factor(datos$est_socio)
levels(datos$est_socio) <- c("Medio bajo", "Medio alto", "Alto")
#AGREGUEN MÁS O PÓNGANLAS MÁS BONITAS SI GUSTAN
ggplot(datos,aes(edad_jefe, ing_cor))+geom_point() +labs(y= "Ingreso corriente", x = "Edad")
ggplot(datos,aes(erogac_tot, ing_cor))+geom_point() +labs(y= "Ingreso corriente", x = "Erogaciones totales")
ggplot(datos,aes(gasto_mon, ing_cor))+geom_point() +labs(y= "Ingreso corriente", x = "Gasto monetario")
ggplot(datos,aes(sexo_jefe, ing_cor))+geom_point() +labs(y= "Ingreso corriente", x = "Sexo")
ggplot(datos,aes(as.factor(educa_jefe), ing_cor))+geom_point() +labs(y= "Ingreso corriente", x = "Años escolarizados")
ggplot(datos,aes(as.factor(est_socio), ing_cor))+geom_point() +labs(y= "Ingreso corriente", x = "Estrato socioeconómico")
mejoraCDMX <- lm(datos$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, datos)
summary(mejoraCDMX)
m <- as.matrix(datos)
m<- m[,-c(1,2,5,6,7)]
mat <- t(m) %*% m
summary(mejoraCDMX)
media_error <- sum(mejoraCDMX$residuals)
S <-sqrt(sum(mejoraCDMX$residuals^2)/(144-5))
resi_est <- mejoraCDMX$residuals/S
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
summary(sin_ati)
ggplot(BaseSA, aes( x = sin_ati$residuals)) + labs(x = 'Residuos',y = 'Frecuencia', title = '') + geom_histogram() + theme_bw()
ggplot(BaseSA,aes(sin_ati$residuals))+ labs(x = 'Residuos',y = 'Densidad', title = '') + geom_density() + theme_bw()
install.packages("normtest")
library(normtest)
jb.norm.test(sin_ati$residuals,nrepl=2000) #Use Jarque Bera porque ya incluye lo de asimetría y kurtosis
#Se rechaza la hipótesis nula de que se distribuyen normal
modCDMX <- lm(datos$ing_cor ~ est_socio  + gasto_mon  + educa_jefe + tot_integ + edad_jefe, data = datos)
summary(modCDMX)
summary(mejoraCDMX)
media_error <- sum(mejoraCDMX$residuals)
S <-sqrt(sum(mejoraCDMX$residuals^2)/(144-5))
resi_est <- mejoraCDMX$residuals/S
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
summary(sin_ati)
x <- sin_ati$residuals
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
X <- sin_ati$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..))
summary(modCDMX)
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white")
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_dark()
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_bw()
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_linedraw()
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_minimal()
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_minimal() + geom_density(kernel="gaussian")
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_minimal() + geom_density(kernel="gaussian", color = "red")
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2)
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=1)
histog
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- sin_ati$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=1)
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- sin_ati$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black", fill="white") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=1)
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- sin_ati$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..)) + theme_bw() + geom_density(kernel="gaussian", color = "red", size=1)
histog
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- sin_ati$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..)) + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2)
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=1)
histog
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2)
histog
#primero analizamos la siguiente grafica modelo solo con orcutt
ggplot(datos, aes(x = mejoraCDMX$fitted.values ,y =mejoraCDMX$residuals/S)) +
labs(x = 'Ingreso Estimado',y = 'Residuos Estandarizados', title = '') + geom_point() + theme_bw()
#Vemos cómo que los residuos siguen un patron
#Regresión Auxiliar
aux <- lm(mejoraCDMX$residuals^2 ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe + edad_jefe^2  + erogac_tot^2 + gasto_mon^2  + educa_jefe^2 + edad_jefe*erogac_tot + edad_jefe*gasto_mon  + edad_jefe*educa_jefe + erogac_tot*gasto_mon  + erogac_tot*educa_jefe + gasto_mon*educa_jefe, datos)
summary(aux)
nr2 <- 144*0.07631
nr2
#analizando sin datos atipicos
Sta<-sqrt(sum(sin_ati$residuals^2)/139)
ggplot(BaseSA, aes(x = sin_ati$fitted.values ,y =sin_ati$residuals/Sta)) +
labs(x = 'Ingreso Estimado',y = 'Residuos Estandarizados', title = '') + geom_point() + theme_bw()
aux2 <- lm(sin_ati$residuals^2 ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe + edad_jefe^2  + erogac_tot^2 + gasto_mon^2  + educa_jefe^2 + edad_jefe*erogac_tot + edad_jefe*gasto_mon  + edad_jefe*educa_jefe + erogac_tot*gasto_mon  + erogac_tot*educa_jefe + gasto_mon*educa_jefe, BaseSA)
summary(aux2)
nr22 <-144*0.06803
nr22
#Analizando heterosc con la transformcion potencia
ggplot(BaseSA, aes(x = transf$fitted.values ,y =transf$residuals/St)) +
labs(x = 'Ingreso Estimado',y = 'Residuos Estandarizados', title = '') + geom_point() + theme_bw()
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
summary(transf)
St<-sqrt(sum(transf$residuals^2)/139)
ggplot(BaseSA, aes( x = transf$residuals)) + labs(x = 'Residuos',y = 'Frecuencia', title = '') + geom_histogram() + theme_bw()
ggplot(BaseSA,aes(transf$residuals))+ labs(x = 'Residuos',y = 'Densidad', title = '') + geom_density() + theme_bw()
jb.norm.test(transf$residuals,nrepl=2000)
#comparamos con
qchisq(.95,2)
#No se rechaza la hipotesis nula de que se distribuyen normal
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- transf$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2)
histog
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- transf$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "blue", size=2)
histog
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- transf$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "yellow", size=2)
histog
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- transf$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "orange", size=2)
histog
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- transf$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2)
histog
transf <- lm(ing_cor^(1/2) ~ edad_jefe  + erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- transf$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2) + labs(x = 'Residuos',y = 'Frecuencia relativa', title = '')
histog
#primero cargamos la base de datos sin los datos atipicos
BaseSA <- read.csv("BaseSA.csv")
sin_ati <- lm(BaseSA$ing_cor ~ edad_jefe  +erogac_tot + gasto_mon  + educa_jefe, BaseSA)
X <- sin_ati$residuals
df <- data.frame(X)
histog <- ggplot(data = df, aes(x=X)) + geom_histogram(aes(y=..density..), color = "black") + theme_bw() + geom_density(kernel="gaussian", color = "red", size=2) + labs(x = 'Residuos',y = 'Frecuencia relativa', title = '')
histog
library(tidyverse)
library(dplyr)
library(tidyr)
library(matlib)
library(ggplot2)
#install.packages("olsrr"), es para las regresiones
library(olsrr)
#install.packates("GGally"), extensión de ggplot
#install.packages("GGally")
library(GGally)
library(MASS)
library(lmtest)
library(orcutt)
library(HoRM)
library(car)
library(nlme)
#datos <- read.csv("BaseDatosEA2.csv")
#Cambiamos la base porque nos marcaba error en la linea 43, esta base ya esta limpia, solo estan los datos de Alvaro Obregon y las variables que
#pensamos utilizar en el modelo
datos <- read.csv("BaseDatos2.csv")
min(datos$erogac_tot)
min(datos$gasto_mon)
min(datos$educa_jefe)
min(datos$edad_jefe)
20*998.405  + 1.228*6399.78 + 6390.161
20*998.405  + 1.228*6399.78 + 6390.161 - 74452.911
53*998.405  + 1.228*6399.78 + 6390.161 - 74452.911
53*998.405  + 1.228*6399.78 + 11*6390.161 - 74452.911
53*998.405  + 1.228*6399.78 + 3*6390.161 - 74452.911
53*998.405  + 1.228*6399.78 + 2*6390.161 - 74452.911
53*998.405  + 1.228*6399.78 + 3*6390.161 - 74452.911
53*998.405  + 1.228*6399.78 + 2.5*6390.161 - 74452.911
23*998.405  + 1.228*6399.78 + 2.5*6390.161 - 74452.911
23*998.405  + 1.228*6399.78 + 2*6390.161 - 74452.911
24*998.405  + 1.228*6399.78 + 2*6390.161 - 74452.911
25*998.405  + 1.228*6399.78 + 2*6390.161 - 74452.911
24*998.405  + 1.228*6399.78 + 2*6390.161 - 74452.911
24*998.405  + 1.228*6399.78 + 3*6390.161 - 74452.911
min(datos$ing_cor)
view(min(datos$ing_cor))
view[,min(datos$ing_cor)]
view[min(datos$ing_cor),]
